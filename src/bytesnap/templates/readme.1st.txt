WHAT IS THIS?
-------------

    This file is part of {{ project }} v{{ version }} project and was automatically generated by the Bytesnap RPC project generator tool
    (https://github.com/bytesnap/rpc.git).

    Services implemented in this project:

        {% for servicename in servicenames %}{{ servicename }}
        {% endfor %}

    Structure of the project:

        1. Serializer:
        
            bytesnap.hpp

        2. CMake project file:

            CMakeLists.txt

        3. TCP/IP Client-server framework based on Boost.Asio library:

            vst_buffer.hpp
            vst_client.hpp
            vst_connection.hpp
            vst_io_context_pool.hpp
            vst_log_mockup.hpp
            vst_message.hpp
            vst_server.hpp

        4. Structures used by {{ project }} project:

            {% for structurename in structurenames %}{{ structurename.lower() }}.hpp
            {% endfor %}
    
        5. Services implemented by {{ project }} project:

            {% for servicename in servicenames %}{{ servicename.lower() }}_service.hpp, {{ servicename.lower() }}_service.cpp, {{ servicename.lower() }}_method_id.hpp
            {% endfor %}

        6. Procedures (methods) implemented by {{ project }} project:

            {% for servicemethod in servicemethods %}{{ servicemethod}}.hpp, {{ servicemethod}}.cpp
            {% endfor %}

        7. Synchronous RPC Clients and test CLI programms:

            {% for servicename in servicenames %}{{ servicename.lower() }}_client.hpp, {{ servicename.lower() }}_client.cpp, {{ servicename.lower() }}_client_test.cpp
            {% endfor %}


HOW TO USE IT?
--------------

    1. What files you should edit?

    1.1. Define request processors on the server side:

        {% for servicemethod in servicemethods %}{{ servicemethod }}.cpp
        {% endfor %}

    1.2. Define test RPC requsts on the client side:

        {% for servicename in servicenames %}{{ servicename.lower() }}_client_test.cpp
        {% endfor %}

    1.3. Implement your logger of choice in the file vst_log_mockup.hpp 
         Just implement a log writer struct similar to logwriter_base and redefine the VST_LOG macro.


    2. What files you shouldn't edit?

    Do not change any files except those mentioned above.


    3. How to build?

        mkdir build
        cd build
        cmake ..
        cmake --build .
    
    Something like that...


    4. What about thread safety?

    One thing for sure - server uses a fixed number of dediacted threads to process requests, 
    and each request processor object (created one per connection) is bound to one of them. 
    So, request processing methods won't be called from different threads.
    This means pretty much thread safety...
    

PROTOCOL DESCRIPTION
--------------------

    Bytesnap RPC protocol is based on the synchronous exchange of binary messages (LITTLE ENDIAN) with a fixed-length header and a variable-length body over TCP/IP. 
    The client sends requests to the server and receives responses.
    The client must send another request only after receiving the previous response.
    The server side expects valid messages with correct headers. In case of any error, the server will close the connection.
